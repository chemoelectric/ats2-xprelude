Extensions to, and bugfixes for, the ATS2 prelude.
--------------------------------------------------

THIS PROJECT IS A WORK IN PROGRESS.

* Expanded support for integer types, and workarounds for
  bugs. Changes include at least the following:

    - I have added intmax and uintmax.

    - I have worked around bugs in g1 versions of comparisons with
      zero.

    - I have tightened the postconditions of g1 versions of mod and
      nmod.

    - I have added ‘true Euclidean division’ of signed integers,
      where the remainder is always non-negative.

* Expanded support for floating point, and workarounds for bugs.

* 32+32-bit fixed point, treated as if it were floating point.

* Optionally: exact rationals (via the GNU Multiple Precision
  Arithmetic Library)--garbage-collected, and treated as if they were
  floating point.

* Planned but not yet added: sorting by default algorithms that you do
  not have to think about. (For array sorting, the preferred
  implementation will be ats2-timsort. I suppose ats2-quicksorts may
  also be made available as choices. And the prelude’s own sort
  implementations.)

* Also possible: C complex types, treated in ATS as floating point
  types.

* Also possible: moving my ‘bisection iterators’ here. They use the
  exact rationals and can be used to do adaptive algorithms without
  non-tail recursion.

* Also possible: gcd operations.

* Also possible: ‘lldouble’ as a type that could be larger than
  ldouble. In particular, on AMD64, this could be _Float128 (which GCC
  supports via its own libraries).
