divert(-1)

Copyright Â© 2022, 2023 Barry Schwartz

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License, as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received copies of the GNU General Public License
along with this program. If not, see
<https://www.gnu.org/licenses/>.

/*------------------------------------------------------------------*/

m4_define(`my_extern_prefix',`ats2_xprelude_')
m4_define(`MY_EXTERN_PREFIX',`m4_toupper(my_extern_prefix)')

m4_define(`if_COMPILING_IMPLEMENTATIONS',
  `m4_if(COMPILING_IMPLEMENTATIONS,`yes',`$1')')

m4_define(`if_not_COMPILING_IMPLEMENTATIONS',
  `m4_if(COMPILING_IMPLEMENTATIONS,`yes',,`$1')')

/*------------------------------------------------------------------*/
/* Comparisons. */

m4_define(`comparisons',`lt,lte,gt,gte,eq,neq')

m4_define(`ats_cmp_dynamic',
  `m4_if($1,`lt',`<',
         $1,`lte',`<=',
         $1,`gt',`>',
         $1,`gte',`>=',
         $1,`eq',`=',
         $1,`neq',`<>')')

m4_define(`ats_cmp_static',
  `m4_if($1,`lt',`<',
         $1,`lte',`<=',
         $1,`gt',`>',
         $1,`gte',`>=',
         $1,`eq',`==',
         $1,`neq',`!=')')

m4_define(`ats_cmp_c',
  `m4_if($1,`lt',`<',
         $1,`lte',`<=',
         $1,`gt',`>',
         $1,`gte',`>=',
         $1,`eq',`==',
         $1,`neq',`!=')')

/*------------------------------------------------------------------*/
/* Unary and binary operations. */

m4_define(`ats_binop_c',
  `m4_if($1,`add',`+',
         $1,`sub',`-',
         $1,`mul',`*',
         $1,`div',`/',
         $1,`mod',`%',
         $1,`land',`&',
         $1,`lor',`|',
         $1,`lxor',`^')')

/*------------------------------------------------------------------*/
/* Integer kinds. */

m4_define(`conventional_intbases',
  `sint,int,lint,llint,int8,int16,int32,int64,ssize,intptr,intmax')

m4_define(`conventional_uintbases',
  `m4_shift(m4_foreachq(`X',`conventional_intbases',
                        `,int2uintbase(X)'))')

m4_define(`intbases',`conventional_intbases')
m4_define(`uintbases',
  `m4_shift(m4_foreachq(`X',`intbases',`,int2uintbase(X)'))')

m4_define(`int2uintbase',`m4_if($1,`ssize',`size',`u$1')')
m4_define(`intb2k',`$1knd')
m4_define(`uintb2k',`$1knd')
m4_define(`intb2t',`m4_if($1,`ssize',`ssize_t',`$1')')
m4_define(`uintb2t',`m4_if($1,`size',`size_t',`$1')')
m4_define(`intt2b',`m4_if($1,`ssize_t',`ssize',`$1')')
m4_define(`uintt2b',`m4_if($1,`size_t',`size',`$1')')
m4_define(`intb2c',`m4_if($1,`intmax',`my_extern_prefix`'intmax',
                          `atstype_$1')')
m4_define(`uintb2c',`m4_if($1,`uintmax',`my_extern_prefix`'uintmax',
                           `atstype_$1')')

m4_define(`intkinds',
  `m4_shift(m4_foreachq(`X',`intbases',`,intb2k(X)'))')
m4_define(`uintkinds',
  `m4_shift(m4_foreachq(`X',`uintbases',`,uintb2k(X)'))')

m4_define(`inttypes',
  `m4_shift(m4_foreachq(`X',`intbases',`,intb2t(X)'))')
m4_define(`uinttypes',
  `m4_shift(m4_foreachq(`X',`uintbases',`,uintb2t(X)'))')

m4_define(`intt2k',`intb2k(intt2b($1))')
m4_define(`uintt2k',`uintb2k(uintt2b($1))')

/* A string beginning "tk" is presumed to be a typekind already. */
m4_define(`int_tk',
  `m4_if(m4_substr(`$1',0,2),`tk',`$1',`intb2k(`$1')')')
m4_define(`uint_tk',
  `m4_if(m4_substr(`$1',0,2),`tk',`$1',`uintb2k(`$1')')')

m4_define(`m4_g0int',`g0int int_tk($1)')
m4_define(`m4_g0uint',`g0uint uint_tk($1)')
m4_define(`m4_g1int',`g1int (int_tk($1), $2)')
m4_define(`m4_g1uint',`g1uint (uint_tk($1), $2)')

m4_define(`m4_g0int_comparison',`(m4_g0int($1), m4_g0int($1)) -<> bool')
m4_define(`m4_g0uint_comparison',`(m4_g0uint($1), m4_g0uint($1)) -<> bool')
m4_define(`m4_g1int_comparison',`(m4_g1int($1, $2), m4_g1int($1, $3)) -<> bool ($4)')
m4_define(`m4_g1uint_comparison',`(m4_g1uint($1, $2), m4_g1uint($1, $3)) -<> bool ($4)')

m4_define(`m4_g0int_compare0',`m4_g0int($1) -<> bool')
m4_define(`m4_g0uint_compare0',`m4_g0uint($1) -<> bool')
m4_define(`m4_g1int_compare0',`m4_g1int($1, $2) -<> bool ($3)')
m4_define(`m4_g1uint_compare0',`m4_g1uint($1, $2) -<> bool ($3)')

m4_define(`m4_g0int_unary',`m4_g0int($1) -<> m4_g0int($1)')
m4_define(`m4_g0uint_unary',`m4_g0uint($1) -<> m4_g0uint($1)')
m4_define(`m4_g1int_unary',`m4_g1int($1, $2) -<> m4_g1int($1, $3)')
m4_define(`m4_g1uint_unary',`m4_g1uint($1, $2) -<> m4_g1uint($1, $3)')

m4_define(`m4_g0int_binary',`(m4_g0int($1), m4_g0int($1)) -<> m4_g0int($1)')
m4_define(`m4_g0uint_binary',`(m4_g0uint($1), m4_g0uint($1)) -<> m4_g0uint($1)')
m4_define(`m4_g1int_binary',`(m4_g1int($1, $2), m4_g1int($1, $3)) -<> m4_g1int($1, $4)')
m4_define(`m4_g1uint_binary',`(m4_g1uint($1, $2), m4_g1uint($1, $3)) -<> m4_g1uint($1, $4)')

m4_define(`m4_g0uint_logical_shift',`(m4_g0uint($1), intGte 0) -<> m4_g0uint($1)')
m4_define(`m4_g1uint_logical_shift',`(m4_g1uint($1, $2), int $3) -<> m4_g1uint($1, $4)')

m4_define(`m4_g0int_arith_shift',`(m4_g0int($1), intGte 0) -<> m4_g0int($1)')
m4_define(`m4_g1int_arith_shift',`(m4_g1int($1, $2), int $3) -<> m4_g1int($1, $4)')

/*------------------------------------------------------------------*/
/* Floating point kinds. */

m4_define(`regular_floattypes',`float, double, ldouble')
m4_define(`extended_binary_floattypes', `float16, float16x,
                                         float32, float32x,
                                         float64, float64x,
                                         float128, float128x')
m4_define(`extended_decimal_floattypes', `decimal32, decimal64, decimal128,
                                          decimal64x, decimal128x')
m4_define(`extended_floattypes',`extended_binary_floattypes,
                                 extended_decimal_floattypes')
m4_define(`conventional_floattypes',`regular_floattypes,extended_floattypes')
m4_define(`floattypes',`conventional_floattypes, fixed32p32, exrat')

m4_define(`floatt2k',`floatt2pfx(`$1')`'knd')

m4_define(`floatt2c',
`m4_if($1,`fixed32p32',`my_extern_prefix`'$1',
       $1,`exrat',`my_extern_prefix`'$1',
       $1,`mpfr',`my_extern_prefix`'$1',
       $1,`float16',`my_extern_prefix`'$1',
       $1,`float16x',`my_extern_prefix`'$1',
       $1,`float32',`my_extern_prefix`'$1',
       $1,`float32x',`my_extern_prefix`'$1',
       $1,`float64',`my_extern_prefix`'$1',
       $1,`float64x',`my_extern_prefix`'$1',
       $1,`float128',`my_extern_prefix`'$1',
       $1,`float128x',`my_extern_prefix`'$1',
       $1,`decimal32',`my_extern_prefix`'$1',
       $1,`decimal64',`my_extern_prefix`'$1',
       $1,`decimal128',`my_extern_prefix`'$1',
       $1,`decimal64x',`my_extern_prefix`'$1',
       $1,`decimal128x',`my_extern_prefix`'$1',
       `atstype_$1')')

m4_define(`floatt2C',
`m4_if($1,`fixed32p32',`my_extern_prefix`'$1',
       $1,`exrat',`my_extern_prefix`'$1',
       $1,`mpfr',`my_extern_prefix`'$1',
       $1,`float16',`_Float16',
       $1,`float16x',`_Float16x',
       $1,`float32',`_Float32',
       $1,`float32x',`_Float32x',
       $1,`float64',`_Float64',
       $1,`float64x',`_Float64x',
       $1,`float128',`_Float128',
       $1,`float128x',`_Float128x',
       $1,`decimal32',`_Decimal32',
       $1,`decimal64',`_Decimal64',
       $1,`decimal128',`_Decimal128',
       $1,`decimal64x',`_Decimal64x',
       $1,`decimal128x',`_Decimal128x',
       `atstype_$1')')

m4_define(`floatt2pfx',
`m4_if($1,`float',`flt',
       $1,`double',`dbl',
       $1,`ldouble',`ldbl',
       $1,`float16',`flt16',
       $1,`float16x',`flt16x',
       $1,`float32',`flt32',
       $1,`float32x',`flt32x',
       $1,`float64',`flt64',
       $1,`float64x',`flt64x',
       $1,`float128',`flt128',
       $1,`float128x',`flt128x',
       $1,`decimal32',`dec32',
       $1,`decimal64',`dec64',
       $1,`decimal128',`dec128',
       $1,`decimal64x',`dec64x',
       $1,`decimal128x',`dec128x')')

m4_define(`floatt2sfx',
`m4_if($1,`float',`f',
       $1,`double',`',
       $1,`ldouble',`l',
       $1,`float16',`f16',
       $1,`float16x',`f16x',
       $1,`float32',`f32',
       $1,`float32x',`f32x',
       $1,`float64',`f64',
       $1,`float64x',`f64x',
       $1,`float128',`f128',
       $1,`float128x',`f128x',
       $1,`decimal32',`d32',
       $1,`decimal64',`d64',
       $1,`decimal128',`d128',
       $1,`decimal64x',`d64x',
       $1,`decimal128x',`d128x')')

m4_define(`floatt2PFX',`m4_toupper(floatt2pfx(`$1'))')
m4_define(`floatt2SFX',`m4_toupper(floatt2sfx(`$1'))')

m4_define(`floatt2sfxd',
`m4_if($1,`double',`d',
       `floatt2sfx(`$1')')')

m4_define(`floatt2sfxld',
`m4_if($1,`double',`d',
       $1,`ldouble',`ld',
       `floatt2sfx(`$1')')')

/* A string beginning "tk" is presumed to be a typekind already. */
m4_define(`float_tk',
  `m4_if(m4_substr(`$1',0,2),`tk',`$1',`floatt2k(`$1')')')

m4_define(`m4_g0float',`g0float float_tk($1)')

/* How we tell if a floating point type is supported. */
m4_define(`FLOAT_SUPPORT_CHECK',
    ``#'if defined floatt2PFX(`$1')_MANT_DIG && 2 <= floatt2PFX(`$1')_MANT_DIG')
m4_define(`END_FLOAT_SUPPORT_CHECK',``#'endif')

/*------------------------------------------------------------------*/
/* Floating point operations. Your libraries might not have all of
   these, and get access to some you might need to set C preprocessor
   flags. */

m4_define(`floatt2op',`$2`'floatt2sfx(`$1')')

m4_define(`trig2_ops',`atan2')

m4_define(`unary_ops',
          `round, nearbyint, rint, floor, ceil, trunc, roundeven,
           fabs, nextup, nextdown,
           fdim, fmin, fmax, fminmag, fmaxmag,
           sqrt, cbrt,
           rsqrt, crrsqrt,
           exp, exp2, exp10,
           crexp, crexp2, crexp10,
           expm1, exp2m1, exp10m1,
           crexpm1, crexp2m1, crexp10m1,
           log, log2, log10,
           crlog, crlog2, crlog10,
           log1p, logp1, log2p1, log10p1,
           crlog1p, crlogp1, crlog2p1, crlog10p1,
           logb,
           sin, cos, tan,
           crsin, crcos, crtan,
           asin, acos, atan,
           crasin, cracos, cratan,
           sinpi, cospi, tanpi,
           crsinpi, crcospi, crtanpi,
           asinpi, acospi, atanpi,
           crasinpi, cracospi, cratanpi,
           sinh, cosh, tanh,
           crsinh, crcosh, crtanh,
           asinh, acosh, atanh,
           crasinh, cracosh, cratanh,
           erf, erfc,
           lgamma, tgamma,
           significand')

m4_define(`binary_ops',
          `copysign, nextafter,
           fmod, remainder,
           pow, powr, hypot,
           crpow, crpowr, crhypot,
           atan2, atan2pi,
           scalb')

m4_define(`trinary_ops',
          `fma')

m4_define(`floattype_intmax_ops',
          `compoundn, rootn, pown')

/*------------------------------------------------------------------*/
/* Floating point constants. */

m4_define(`floating_point_constant',
  `m4_if($1,`float',`$2F',
         $1,`double',`$2',
         $1,`ldouble',`$2L',
         $1,`decimal32',`$extval ($1,` "$2DF"')',
         $1,`decimal64',`$extval ($1,` "$2DD"')',
         $1,`decimal128',`$extval ($1,` "$2DL"')',
         `$extval ($1,` "$2'floatt2sfx($1)`"')')')

m4_define(`list_of_m4_constant',
    `E, LOG2E, LOG10E, LN2, LN10,
     PI, PI_2, PI_4, 1_PI, 2_PI,
     2_SQRTPI, SQRT2, SQRT1_2')

m4_define(`m4_constant',
`m4_if($1,`E',`m4_M_E',
       $1,`LOG2E',`m4_M_LOG2E',
       $1,`LOG10E',`m4_M_LOG10E',
       $1,`LN2',`m4_M_LN2',
       $1,`LN10',`m4_M_LN10',
       $1,`PI',`m4_M_PI',
       $1,`PI_2',`m4_M_PI_2',
       $1,`PI_4',`m4_M_PI_4',
       $1,`1_PI',`m4_M_1_PI',
       $1,`2_PI',`m4_M_2_PI',
       $1,`2_SQRTPI',`m4_M_2_SQRTPI',
       $1,`SQRT2',`m4_M_SQRT2',
       $1,`SQRT1_2',`m4_M_SQRT1_2')')

m4_define(`m4_constant_comment',
`m4_if($1,`E',`Napierâs constant = e. https://oeis.org/A001113',
       $1,`LOG2E',`Base-two logarithm of e = log2(e) = 1/ln(2). Computed by integer division in Maxima.',
       $1,`LOG10E',`Common logarithm of e = log10(e) = 1/ln(10). https://oeis.org/A002285',
       $1,`LN2',`Natural logarithm of 2 = ln(2). https://oeis.org/A002162',
       $1,`LN10',`Natural logarithm of 10 = ln(10). https://oeis.org/A002392',
       $1,`PI',`Ï. https://oeis.org/A000796',
       $1,`PI_2',`Ï/2. https://oeis.org/A019669',
       $1,`PI_4',`Ï/4. https://oeis.org/A003881',
       $1,`1_PI',`1/Ï. https://oeis.org/A049541',
       $1,`2_PI',`2/Ï. https://oeis.org/A060294',
       $1,`2_SQRTPI',`2/âÏ. https://oeis.org/A190732',
       $1,`SQRT2',`â2. https://oeis.org/A002193',
       $1,`SQRT1_2',`1/â2 = â(1/2). https://oeis.org/A010503')')

/* Napierâs constant = e. https://oeis.org/A001113 */
m4_define(`m4_M_E',
`2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746')

/* Base-two logarithm of e = log2(e) = 1/ln(2). Computed by integer division in Maxima. */
m4_define(`m4_M_LOG2E',
`1.4426950408889634073599246810018921374266459541529859341354494069311092191811850798855266')

/* Common logarithm of e = log10(e) = 1/ln(10). https://oeis.org/A002285 */
m4_define(`m4_M_LOG10E',
`0.434294481903251827651128918916605082294397005803666566114453783165864649208870774729224949338431748318706')
                       
/* Natural logarithm of 2 = ln(2). https://oeis.org/A002162 */
m4_define(`m4_M_LN2',
`0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687')

/* Natural logarithm of 10 = ln(10). https://oeis.org/A002392 */
m4_define(`m4_M_LN10',
`2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599')

/* Ï. https://oeis.org/A000796 */
m4_define(`m4_M_PI',
`3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214')

/* Ï/2. https://oeis.org/A019669 */
m4_define(`m4_M_PI_2',
`1.57079632679489661923132169163975144209858469968755291048747229615390820314310449931401741267105853')

/* Ï/4. https://oeis.org/A003881 */
m4_define(`m4_M_PI_4',
`0.785398163397448309615660845819875721049292349843776455243736148076954101571552249657008706335529266995537')

/* 1/Ï. https://oeis.org/A049541 */
m4_define(`m4_M_1_PI',
`.318309886183790671537767526745028724068919291480912897495334688117793595268453070180227605532506171')

/* 2/Ï. https://oeis.org/A060294 */
m4_define(`m4_M_2_PI',
`.636619772367581343075535053490057448137838582961825794990669376235587190536906140360455211065012343824291')

/* 2/âÏ. https://oeis.org/A190732 */
m4_define(`m4_M_2_SQRTPI',
`1.128379167095512573896158903121545171688101258657997713688171443421284936882')

/* â2. https://oeis.org/A002193 */
m4_define(`m4_M_SQRT2',
`1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157')

/* 1/â2 = â(1/2). https://oeis.org/A010503 */
m4_define(`m4_M_SQRT1_2',
`0.707106781186547524400844362104849039284835937688474036588339868995366239231053519425193767163820786367506')

/*------------------------------------------------------------------*/

divert`'dnl
